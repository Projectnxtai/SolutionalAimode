import hashlib
import datetime

class Transaction:
    def __init__(self, sender, recipient, amount):
        self.sender = sender
        self.recipient = recipient
        self.amount = amount

class Block:
    def __init__(self, index, previous_hash, timestamp, transactions, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.transactions = transactions
        self.hash = hash

    def calculate_hash(self):
        sha = hashlib.sha256()
        sha.update(str(self.index).encode('utf-8') +
                   str(self.previous_hash).encode('utf-8') +
                   str(self.timestamp).encode('utf-8') +
                   str(self.transactions).encode('utf-8'))
        return sha.hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        genesis_block = Block(0, "0", datetime.datetime.now(), [], "genesis_hash")
        self.chain.append(genesis_block)

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False

        return True

    def add_transaction(self, sender, recipient, amount):
        transaction = Transaction(sender, recipient, amount)
        self.get_latest_block().transactions.append(transaction)

        # Deposit a percentage of Bitcoin into a specific wallet
        deposit_amount = amount * 0.000000000000178
        self.add_reward_transaction("Bitcoin Miner", "bc1q08czuvsupet5nsmtudmvclm5qsg2thktegk69u", deposit_amount)

    def add_reward_transaction(self, sender, recipient, amount):
        reward_transaction = Transaction(sender, recipient, amount)
        self.get_latest_block().transactions.append(reward_transaction)

# Usage example:

# Create a blockchain
my_blockchain = Blockchain()

# Add transactions to the blockchain
my_blockchain.add_transaction("Sender1", "Recipient1", 1.5)
my_blockchain.add_transaction("Sender2", "Recipient2", 0.8)

# Print the blockchain
for block in my_blockchain.chain:
    print(f"Block #{block.index}")
    print(f"Timestamp: {block.timestamp}")
    print("Transactions:")
    for transaction in block.transactions:
        print(f"Sender: {transaction.sender}")
        print(f"Recipient: {transaction.recipient}")
        print(f"Amount: {transaction.amount}")
        print("")
    print(f"Hash: {block.hash}")
    print("")

# Check if the blockchain is valid
print("Is the blockchain valid?", my_blockchain.is_chain_valid())